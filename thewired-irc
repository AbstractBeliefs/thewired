#!/usr/bin/env python3

import asyncio

clients = []

self_client_ident = "You!anon@localhost"
anon_client_ident = "Anonymous!anon@localhost"


class Client:
    def __init__(self, writer):
        self.writer = writer
        self.channels = set()

    def write(self, string):
        print(f"-> {string}")
        self.writer.write(f"{string}\r\n".encode())

    def send_ping(self):
        self.write(f"PING :001")

    def send_pong(self, token):
        self.write(f"PONG {token}")

    def send_whois(self):
        self.write(
            f":thewired 311 navi Anonymous Anonymous anon@localhost * :Anonymous"
        )

    def send_welcome(self):
        self.write(f":thewired 001 You :Welcome to The Wired")
        self.write(f":thewired 376 :Stay comfy")

    def send_notice(self, channel, msg):
        self.write(f":thewired NOTICE {channel} :{msg}")

    def send_privmsg(self, channel, msg):
        self.write(f":{anon_client_ident} PRIVMSG {channel} :{msg}")

    def send_join(self, channel):
        self.write(f":{anon_client_ident} TOPIC {channel} :{channel}")
        self.write(f":{self_client_ident} JOIN :{channel}")
        self.write(f":thewired 353 You = {channel} :You Anonymous")


async def handle(reader, writer):
    client = Client(writer)
    clients.append(client)
    addr = writer.get_extra_info("peername")
    print(f"{addr!r} connected")
    client.send_ping()
    while True:
        data = await reader.readuntil(b"\r\n")
        message = data.decode().strip()
        print(message)
        message_parts = message.split(" ")
        if message.startswith("PING"):
            if len(message_parts) > 1:
                token = message_parts[1]
                client.send_pong(token)
        elif message.startswith("USER"):
            client.send_welcome()
        elif message.startswith("WHOIS"):
            client.send_whois()
        elif message.startswith("JOIN"):
            if len(message_parts) > 1:
                channel = message_parts[1]
                client.send_join(channel)
        elif message.startswith("PRIVMSG"):
            if len(message_parts) > 2:
                channel = message_parts[1]
                message = message.split(":", 1)[1]
                client.send_privmsg(channel, message)
        await writer.drain()
    clients.remove(client)
    writer.close()


async def main():
    server = await asyncio.start_server(handle, "127.0.0.1", 6667)
    addr = server.sockets[0].getsockname()
    print(f"serving on {addr}")
    async with server:
        await server.serve_forever()


asyncio.run(main())
